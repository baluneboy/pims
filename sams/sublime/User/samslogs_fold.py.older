import os, re
import sublime, sublime_plugin

# SEE sandbox/redict_example.py FOR AN IDEA ON GETTING EACH FILE TYPE ITS OWN LIST OF PATs TO FOLD

class RegExpDict(dict):
    def __getitem__(self, regex):
        r = re.compile(regex)
        mkeys = filter(r.match, self.keys())
        for i in mkeys:
            yield dict.__getitem__(self, i)

PATTERNS_TO_FOLD = [
# Feb 18 11:00:05 icu-f01 Cumain v1.27[247]: ICU System clock adjusted by 0 sec 5971 usec
'(\w+\s+\d{1,2} \d{2}:\d{2}:\d{2} icu-f01 Cumain v1.27\[\d+\]: ICU System clock adjusted by .*sec\n)+',
# Feb 11 11:59:14 icu-f01 rarpd[1305]: ep1: 0:60:97:94:35:53
'(\w+\s+\d{1,2} \d{2}:\d{2}:\d{2} icu-f01 rarpd\[\d+\]: ep1: 0:\d{2}:\d{2}:\d{2}:\d{2}:\d{2}\n)+',
# Feb 18 06:42:29 icu-f01 /netbsd: APM ioctl get power status: unknown error code (0x530a)
'(\w+\s+\d{1,2} \d{2}:\d{2}:\d{2} icu-f01 /netbsd: APM ioctl get power status: unknown error code \(0x530a\)\n)+',
# Feb 25 09:59:59 icu-f01 newsyslog[29283]: logfile turned over
'(\w+\s+\d{1,2} \d{2}:\d{2}:\d{2} icu-f01 newsyslog\[\d+\]: logfile turned over\n)+',
# 2014-08-04T06:26:01.758675+00:00 icu-f01 CRON[10452]:blah
'(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}.\d{2}:\d{2} icu-f01 CRON\[\d+\]:.*\n)+',
]

			#<string>(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}.\d{2}:\d{2} icu-f01 CRON\[\d+\]:).*$\n?</string>

			#<string>(;).*$\n?</string>


FILES_TO_FOLD = [
'.*/var/log/(syslog|syslog\.\d{1})',
'.*/var/log/(commandlog|commandlog\.\d{1})',
]

def syslog_foldpat_list(fname):
    print '\nfold patterns for %s' % fname
    patlist = [
    # 2014-08-04T06:26:01.758675+00:00 icu-f01 CRON[10452]:blah
    '(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}.\d{2}:\d{2} icu-f01 CRON\[\d+\]:.*\n)+',
    ]
    return patlist
    
def commandlog_foldpat_list(fname):
    print '\nfold patterns for %s' % fname
    patlist = [
    # 2013-10-24T15:32:03.239430+00:00 icu-f01 Cumain v2.00[23334]: Rec'd SAM_I_AM (601) from 122-s02-client at Internal Process
    "(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}.\d{2}:\d{2} icu-f01 Cumain v2\.00 \[\d+\]: Rec'd SAM_I_AM.*\n)+",
    ]
    return patlist

def execute_method_for(s, mydict):
    # Match each regex on the string
    matches = (
        (regex.match(s), f) for regex, f in mydict.iteritems()
    )

    # Filter out empty matches, and extract groups
    matches = (
        (match.groups(), f) for match, f in matches if match is not None
    )

    # Apply all the functions
    for args, f in matches:
        return f(*args)

mydict = {}
mydict[re.compile('.*/var/log/(syslog|syslog\.\d{1})')] = syslog_foldpat_list
mydict[re.compile('.*/var/log/sams-ii/(commandlog|commandlog\.\d{1})')] = messages_foldpat_list
#fname = '/home/sams-ii/messages.2'
#out = execute_method_for(fname, mydict)
#print out

class FoldCommand(sublime_plugin.TextCommand):
    def run(self, edit, **args):
        print args['patterns']
        for pattern in PATTERNS_TO_FOLD:
            regions = self.view.find_all(pattern)
            if regions:
                self.view.fold(regions)

class SamsLogsFold(sublime_plugin.EventListener):
    def on_load(self, view):
        file_name = view.file_name()
        if file_name:
            for file_pattern in FILES_TO_FOLD:
                match = re.search(file_pattern, file_name, re.IGNORECASE)
                if match:
                    pattern_list = execute_method_for(file_name, mydict)
                    view.run_command('fold', {"patterns": pattern_list, "spare": "dime"})
                    break